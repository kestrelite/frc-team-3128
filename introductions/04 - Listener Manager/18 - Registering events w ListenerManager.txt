GOAL: Understand how ListenerManager works and how Listener callbacks work
-----

DETAILS: ListenerManager associates strings and integers with events. When an event is registered with the ListenerManager, it must be given an associated string or integer, known as the "key." 

When the key is invoked, the ListenerManager will go through the list and find all events with matching keys, then execute them in order. For example, let's say I have an event:

	Event e = new Event() {
		public void execute() {
			Global.motFL.setSpeed(0.5);
		}
	}

The event obviously will set the power of motFL to 50%. Now, what if I want to do this when I press the X button? (For the purposes of this example, we're assuming the controller's event is already running)

ListenerManager.addListener(e, "buttonXDown");
  or
ListenerManager.addListener(e, ListenerConst.BTN_X_DOWN); //better for clarity

The ListenerCosnt class contains most of the available Listener constants. This is critically important for the Listeners, as this greatly increases the clarity and consistency of what you're doing. For instance (and this has happened), one can make a typo in "buttonXDown", but one cannot easily make a typo in ListenerConst.BTN_X_DOWN.

To call a Listener, one simply needs to call ListenerManager.callListener; both a string and an int are acceptable.
-----

TASK: Create an event, and register it to trigger when the string "test" is called.
-----

SUCCESS: ...
-----